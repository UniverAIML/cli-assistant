TASK-MODEL-001: Base Field Classes
Label: Implement Base Field Validation
Description: Create foundational field classes with validation for contact data.

Requirements:

Field Base Class:
Properties: value: str - stores the field value
Methods: __init__(value: str), __str__() -> str
Validation: Basic type checking for string input
Error Handling: Raise TypeError for non-string values
Name Field Class:
Properties: Inherits from Field
Validations:
Non-empty string validation (raise ValueError if empty or whitespace-only)
Strip leading/trailing whitespace automatically
Minimum length: 1 character after stripping
Maximum length: 100 characters
Allow letters, spaces, hyphens, apostrophes only
Regex Pattern: ^[a-zA-Z\s\-']{1,100}$
Phone Field Class:
Properties: Inherits from Field, stores cleaned phone number
Validations:
Exactly 10 digits after cleaning (remove all non-numeric characters)
No international codes (US format only)
Regex for cleaning: [^0-9] -> remove all
Final format validation: ^\d{10}$
Error Messages: "Phone number must contain exactly 10 digits"
Static Method: _validate_phone(phone: str) -> bool
Birthday Field Class:
Properties: date: datetime.date, stores parsed date object
Validations:
Strict DD.MM.YYYY format using strptime
Date must be in the past (not future dates)
Reasonable age limits: 1900 <= year <= current_year - 1
Handle leap years correctly
Format String: "%d.%m.%Y"
Error Messages: "Invalid date format. Use DD.MM.YYYY"
Execution Sequence:

Create src/address_book/models.py file
Implement Field base class with constructor and string methods
Add Name class with whitespace and length validation
Implement Phone class with digit extraction and validation
Create Birthday class with date parsing and range validation
Add comprehensive unit tests for each field type
Test edge cases: empty strings, invalid formats, boundary values