"""
–ú–æ–¥—É–ª—å —á–∞—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω–æ—ó –º–æ–¥–µ–ª—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏.
–¶–µ–π –º–æ–¥—É–ª—å –∑–∞–±–µ–∑–ø–µ—á—É—î –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —á–µ—Ä–µ–∑ —á–∞—Ç-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ–π.
"""

import json
import re
from typing import Any, Dict, List, Optional

from colorama import Fore, Style

from .config_manager import LoggerMixin

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏
from .function_definitions import FunctionDefinitions
from .function_executor import FunctionExecutor
from .model_manager import ModelManager
from .operations_manager import OperationsManager


class ChatAssistant(LoggerMixin):
    """
    –ß–∞—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω—É –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏.

    –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
    - –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    - –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π
    - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—î—é —Ä–æ–∑–º–æ–≤–∏
    - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ AI –º–æ–¥–µ–ª—è–º–∏
    """

    def __init__(self) -> None:
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —á–∞—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ –º–æ–¥–µ–ª–ª—é —Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.

        –°—Ç–≤–æ—Ä—é—î:
        - ModelManager –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ AI –º–æ–¥–µ–ª—è–º–∏
        - OperationsManager –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –¥–∞–Ω–∏–º–∏
        - FunctionExecutor –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π
        - –Ü—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏
        """
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π (Singleton)
        self.model_manager = ModelManager()

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Ç–∞ –Ω–æ—Ç–∞—Ç–∫–∞–º–∏
        self.operations = OperationsManager()

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å —Ñ—É–Ω–∫—Ü—ñ–π
        self.function_executor = FunctionExecutor(self.operations)

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏ (—Å–ø–∏—Å–æ–∫ –æ–±–º—ñ–Ω—ñ–≤ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ç–∞ –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º)
        self.conversation_history: List[Dict[str, str]] = []
        self.is_running = True

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—É
        self.system_prompt = FunctionDefinitions.SYSTEM_PROMPT
        self.available_functions = FunctionDefinitions.AVAILABLE_FUNCTIONS

    def welcome_message(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
        return "ü§ñ Welcome to CLI Assistant with AI!"

    def parse_function_call(self, response: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç—å –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–æ–¥–µ–ª—ñ.

        –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ–π:
        - OpenAI —Ñ–æ—Ä–º–∞—Ç: "FUNCTION_CALL:function_name:arguments_json"
        - JSON –≤ –±–ª–æ–∫–∞—Ö –∫–æ–¥—É: ```json {...} ```
        - –ü—Ä–æ—Å—Ç–∏–π JSON: {...}

        Args:
            response: –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–¥–µ–ª—ñ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É

        Returns:
            Dict –∑ –¥–µ—Ç–∞–ª—è–º–∏ –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó –∞–±–æ None —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ OpenAI —Ñ–æ—Ä–º–∞—Ç –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó —Å–ø–æ—á–∞—Ç–∫—É
        if response.startswith("FUNCTION_CALL:"):
            try:
                # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –º–∞–∫—Å–∏–º—É–º 3 —á–∞—Å—Ç–∏–Ω–∏ (–ø—Ä–µ—Ñ—ñ–∫—Å:—Ñ—É–Ω–∫—Ü—ñ—è:–∞—Ä–≥—É–º–µ–Ω—Ç–∏)
                parts = response.split(":", 2)
                if len(parts) >= 3:
                    function_name = parts[1]
                    arguments_json = parts[2]
                    arguments = json.loads(arguments_json)

                    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
                    function_call = {
                        "function": function_name,
                        "arguments": arguments,
                        "tool_call_id": f"call_{function_name}_{hash(arguments_json) % 10000}",
                    }
                    print(f"üîç Debug - Found OpenAI function call: {function_call}")
                    return function_call
            except (json.JSONDecodeError, IndexError) as e:
                print(f"üîç Debug - Error parsing OpenAI function call: {e}")

        # –®—É–∫–∞—î–º–æ JSON –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –±–ª–æ–∫–∞—Ö –∫–æ–¥—É
        json_pattern = r"```json\s*(\{.*?\})\s*```"
        json_match = re.search(json_pattern, response, re.DOTALL)

        if json_match:
            try:
                function_call = json.loads(json_match.group(1))
                # –î–æ–¥–∞—î–º–æ tool_call_id —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
                if "tool_call_id" not in function_call:
                    function_call["tool_call_id"] = (
                        f"call_{function_call.get('function', 'unknown')}_{hash(json_match.group(1)) % 10000}"
                    )
                return function_call  # type: ignore[no-any-return]
            except json.JSONDecodeError as e:
                print(f"üîç Debug - JSON decode error in code block: {e}")

        # –®—É–∫–∞—î–º–æ JSON –±–µ–∑ –±–ª–æ–∫—ñ–≤ –∫–æ–¥—É
        json_pattern = r'\{[^{}]*"function"[^{}]*\}'
        json_match = re.search(json_pattern, response, re.DOTALL)

        if json_match:
            try:
                function_call = json.loads(json_match.group(0))
                # –î–æ–¥–∞—î–º–æ tool_call_id —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
                if "tool_call_id" not in function_call:
                    function_call["tool_call_id"] = (
                        f"call_{function_call.get('function', 'unknown')}_{hash(json_match.group(0)) % 10000}"
                    )
                return function_call  # type: ignore[no-any-return]
            except json.JSONDecodeError as e:
                print(f"üîç Debug - JSON decode error without code block: {e}")

        # –®—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—É JSON-–ø–æ–¥—ñ–±–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        json_pattern = r'\{.*?"function".*?\}'
        json_match = re.search(json_pattern, response, re.DOTALL)

        if json_match:
            try:
                # –ù–∞–º–∞–≥–∞—î–º–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç–∏ JSON
                json_str = json_match.group(0)
                function_call = json.loads(json_str)
                # –î–æ–¥–∞—î–º–æ tool_call_id —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
                if "tool_call_id" not in function_call:
                    function_call["tool_call_id"] = (
                        f"call_{function_call.get('function', 'unknown')}_{hash(json_str) % 10000}"
                    )
                print(
                    f"\033[90müîç Debug - Found JSON-like structure: {function_call}\033[0m"
                )
                return function_call  # type: ignore[no-any-return]
            except json.JSONDecodeError as e:
                print(f"üîç Debug - JSON decode error in JSON-like structure: {e}")

        # –í–∏–≤–æ–¥–∏–º–æ debug –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—ñ—Ä–∏–º –∫–æ–ª—å–æ—Ä–æ–º
        print(f"\033[90müîç Debug - No function call found in response\033[0m")
        return None

    def execute_function_call(
        self, function_call: Dict[str, Any], user_input: str
    ) -> str:
        """
        –í–∏–∫–æ–Ω—É—î –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å —Ñ—É–Ω–∫—Ü—ñ–π.

        Args:
            function_call: –î–µ—Ç–∞–ª–∏ –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
            user_input: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
        """
        return self.function_executor.execute_function_call(function_call, user_input)

    def generate_function_calling_response(self, user_input: str) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ–π.

        –ü—Ä–æ—Ü–µ—Å:
        1. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –º–æ–¥–µ–ª—ñ
        2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–æ–¥–µ–ª–ª—é
        3. –ü–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–ª–∏–≤–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ–π
        4. –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –∑–∞ –ø–æ—Ç—Ä–µ–±–∏

        Args:
            user_input: –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç –∞–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó)
        """
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π
            messages = self.model_manager.prepare_messages(
                user_input, self.conversation_history
            )

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π
            assistant_response = self.model_manager.generate_function_calling_response(
                messages
            )

            # –ù–∞–º–∞–≥–∞—î–º–æ—Å—å —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
            function_call = self.parse_function_call(assistant_response)

            if function_call:
                # –í–∏–∫–æ–Ω—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                function_result = self.execute_function_call(function_call, user_input)

                # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ –≤–∏–∫–ª–∏–∫–æ–º —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                assistant_tool_message = {
                    "role": "assistant",
                    "content": assistant_response,
                    "tool_calls": [
                        {
                            "id": function_call.get(
                                "tool_call_id", f"call_{function_call['function']}"
                            ),
                            "type": "function",
                            "function": {
                                "name": function_call["function"],
                                "arguments": json.dumps(function_call["arguments"]),
                            },
                        }
                    ],
                }

                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
                messages_copy = messages.copy()
                messages_copy.append(assistant_tool_message)  # type: ignore

                # –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ tool –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                tool_message = {
                    "role": "tool",
                    "tool_call_id": function_call.get(
                        "tool_call_id", f"call_{function_call['function']}"
                    ),
                    "name": function_call["function"],
                    "content": function_result,
                }
                messages_copy.append(tool_message)  # type: ignore

                # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ñ—É–Ω–∫—Ü—ñ—ó
                final_response = self.model_manager.generate_function_calling_response(
                    messages_copy
                )

                return final_response

            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (–∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
                if "help" in user_input.lower() and (
                    "command" in assistant_response.lower()
                    or "help" in assistant_response.lower()
                ):
                    return FunctionDefinitions.HELP_MESSAGE

                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–∏—Ä–æ–¥–Ω—É –º–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
                return assistant_response

        except Exception as e:
            self.logger.error(f"Error in function calling response: {str(e)}")
            return f"Sorry, I encountered an error: {str(e)}"

    def generate_response(self, user_input: str) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ AI.

        –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
        1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –Ω–µ –ø—É—Å—Ç–∏–π –∑–∞–ø–∏—Ç
        2. –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ –≤–∏—Ö–æ–¥—É
        3. –ü–µ—Ä–µ–¥–∞—î –∑–∞–ø–∏—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ–π –º–æ–¥–µ–ª—ñ

        Args:
            user_input: –í–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
        """
        if not user_input.strip():
            return "I didn't catch that. Could you please say something?"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –≤–∏—Ö–æ–¥—É
        if any(cmd in user_input.lower() for cmd in ["exit", "quit", "bye", "goodbye"]):
            self.is_running = False
            return "Goodbye! Have a great day!"

        # –î–æ–∑–≤–æ–ª—è—î–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ–π –º–æ–¥–µ–ª—ñ –æ–±—Ä–æ–±–∏—Ç–∏ –≤—Å–µ
        response = self.generate_function_calling_response(user_input)

        return response

    def add_to_history(self, user_input: str, assistant_response: str) -> None:
        """
        –î–æ–¥–∞—î —Ä–æ–∑–º–æ–≤—É –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó.

        Args:
            user_input: –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            assistant_response: –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
        """
        self.conversation_history.append(
            {"user": user_input, "assistant": assistant_response}
        )

    def get_conversation_history(self) -> List[Dict[str, str]]:
        """
        –û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏.

        Returns:
            –ö–æ–ø—ñ—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏
        """
        return self.conversation_history.copy()

    def chat_loop(self) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —á–∞—Ç—É –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–∑–º–æ–≤–∏.

        –ó–∞–ø—É—Å–∫–∞—î –±–µ–∑–∫—ñ–Ω–µ—á–Ω–∏–π —Ü–∏–∫–ª –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:
        1. –í–∏–≤–æ–¥–∏—Ç—å –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        2. –ß–∏—Ç–∞—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        3. –ì–µ–Ω–µ—Ä—É—î —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        4. –ó–±–µ—Ä—ñ–≥–∞—î –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        5. –û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
        """
        print(self.welcome_message())
        print("\n" + "=" * 50 + "\n")

        while self.is_running:
            try:
                # –ß–∏—Ç–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user_input = input("You: ").strip()

                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏
                if not user_input:
                    continue

                # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                response = self.generate_response(user_input)
                print(f"\nAssistant: {response}\n")

                # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
                self.add_to_history(user_input, response)

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —Ç—Ä–µ–±–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏
                if not self.is_running:
                    break

            except KeyboardInterrupt:
                # –û–±—Ä–æ–±–ª—è—î–º–æ Ctrl+C
                print("\n\nGoodbye! Thanks for chatting!")
                break
            except Exception as e:
                # –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏
                print(f"\nSorry, I encountered an error: {e}")
                print("Let's try again!\n")
