"""
–ì–∞—Ä–Ω—ñ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.

–¶–µ–π –º–æ–¥—É–ª—å –º—ñ—Å—Ç–∏—Ç—å —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏, –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–∏–∫—Ä–∞—Å–∏
–¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Ä–∞–∂–∞—é—á–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ.
"""

import random
import time
from typing import List, Optional

import pyfiglet
from art import text2art
from halo import Halo
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich import box
from rich.align import Align
from rich.columns import Columns
from rich.live import Live
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.table import Table
from rich.layout import Layout
from rich.rule import Rule
from colorama import Fore, Back, Style
from .animated_effects import AnimatedEffects


class VisualEffects:
    """–ö–ª–∞—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–∞—Ä–Ω–∏—Ö –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤ —É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ."""
    
    def __init__(self, console: Optional[Console] = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤."""
        self.console = console or Console()
        self.animated = AnimatedEffects(self.console)
        self.colors = [
            "red", "green", "yellow", "blue", "magenta", "cyan", "white",
            "bright_red", "bright_green", "bright_yellow", "bright_blue",
            "bright_magenta", "bright_cyan", "bright_white"
        ]
        self.gradient_colors = [
            "#FF0000", "#FF3300", "#FF6600", "#FF9900", "#FFCC00", "#FFFF00",
            "#CCFF00", "#99FF00", "#66FF00", "#33FF00", "#00FF00", "#00FF33",
            "#00FF66", "#00FF99", "#00FFCC", "#00FFFF", "#00CCFF", "#0099FF",
            "#0066FF", "#0033FF", "#0000FF", "#3300FF", "#6600FF", "#9900FF",
            "#CC00FF", "#FF00FF", "#FF00CC", "#FF0099", "#FF0066", "#FF0033"
        ]
    
    def create_ascii_title(self, text: str, font: str = "big") -> str:
        """–°—Ç–≤–æ—Ä—é—î ASCII-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–µ–ª–∏–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏."""
        try:
            return pyfiglet.figlet_format(text, font=font)
        except:
            # –Ø–∫—â–æ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
            return pyfiglet.figlet_format(text)
    
    def create_art_title(self, text: str, font: str = "block") -> str:
        """–°—Ç–≤–æ—Ä—é—î —Ö—É–¥–æ–∂–Ω—ñ–π ASCII-–∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        try:
            return text2art(text, font=font)
        except:
            # –Ø–∫—â–æ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
            return text2art(text)
    
    def display_animated_title(self, title: str, subtitle: str = "") -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –µ—Ñ–µ–∫—Ç–∞–º–∏."""
        self.console.clear()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ ASCII-–∑–∞–≥–æ–ª–æ–≤–æ–∫
        ascii_title = self.create_ascii_title(title)
        
        # –î–æ–¥–∞—î–º–æ –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –Ω–∞–∑–≤ –∫–æ–ª—å–æ—Ä—ñ–≤ Rich
        lines = ascii_title.split('\n')
        colored_lines = []
        
        color_sequence = [
            "red", "bright_red", "yellow", "bright_yellow", "green", 
            "bright_green", "cyan", "bright_cyan", "blue", "bright_blue", 
            "magenta", "bright_magenta"
        ]
        
        for i, line in enumerate(lines):
            if line.strip():  # –Ø–∫—â–æ —Ä—è–¥–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
                color = color_sequence[i % len(color_sequence)]
                colored_lines.append(Text(line, style=f"bold {color}"))
            else:
                colored_lines.append(Text(line))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–∞—Ä–Ω—É –ø–∞–Ω–µ–ª—å
        panel = Panel(
            Align.center("\n".join(str(line) for line in colored_lines)),
            box=box.DOUBLE_EDGE,
            padding=(1, 2),
            style="bold bright_white",
            border_style="bright_magenta"
        )
        
        self.console.print(panel)
        
        if subtitle:
            subtitle_panel = Panel(
                Align.center(Text(subtitle, style="italic bright_cyan")),
                box=box.ROUNDED,
                padding=(0, 1),
                style="bright_blue"
            )
            self.console.print(subtitle_panel)
        
        self.console.print()
    
    def display_loading_animation(self, text: str = "Loading...", duration: float = 0.8) -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–∞—Ä–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è."""
        spinner_styles = ['dots', 'line', 'pipe', 'simpleDots', 'simpleDotsScrolling', 
                         'star', 'star2', 'flip', 'hamburger', 'growVertical', 
                         'growHorizontal', 'balloon', 'balloon2', 'noise', 'bounce']
        
        spinner = Halo(
            text=text, 
            spinner=random.choice(spinner_styles),
            color='cyan'
        )
        
        spinner.start()
        time.sleep(duration)
        spinner.stop()
    
    def display_progress_bar(self, total: int, description: str = "Progress") -> Progress:
        """–°—Ç–≤–æ—Ä—é—î –≥–∞—Ä–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é."""
        progress = Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(complete_style="bright_green", finished_style="green"),
            TaskProgressColumn(),
            console=self.console
        )
        return progress
    
    def create_rainbow_text(self, text: str) -> Text:
        """–°—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç –∑ —Ä–∞–π–¥—É–∂–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏."""
        rainbow_text = Text()
        colors = ["red", "bright_red", "yellow", "green", "cyan", "blue", "magenta"]
        
        for i, char in enumerate(text):
            color = colors[i % len(colors)]
            rainbow_text.append(char, style=f"bold {color}")
        
        return rainbow_text
    
    def display_success_message(self, message: str) -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –∑ –µ—Ñ–µ–∫—Ç–∞–º–∏."""
        success_text = Text("‚úÖ SUCCESS!", style="bold bright_green")
        
        panel = Panel(
            Align.center(f"{success_text}\n\n{message}"),
            box=box.DOUBLE,
            padding=(1, 2),
            style="bright_green",
            border_style="green"
        )
        
        self.console.print(panel)
    
    def display_error_message(self, message: str) -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ –µ—Ñ–µ–∫—Ç–∞–º–∏."""
        error_text = Text("‚ùå ERROR!", style="bold bright_red")
        
        panel = Panel(
            Align.center(f"{error_text}\n\n{message}"),
            box=box.DOUBLE,
            padding=(1, 2),
            style="bright_red",
            border_style="red"
        )
        
        self.console.print(panel)
    
    def display_info_message(self, message: str, title: str = "INFO") -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –µ—Ñ–µ–∫—Ç–∞–º–∏."""
        info_text = Text(f"‚ÑπÔ∏è  {title}!", style="bold bright_blue")
        
        panel = Panel(
            Align.center(f"{info_text}\n\n{message}"),
            box=box.ROUNDED,
            padding=(1, 2),
            style="bright_blue",
            border_style="blue"
        )
        
        self.console.print(panel)
    
    def create_gradient_rule(self, title: str = "") -> None:
        """–°—Ç–≤–æ—Ä—é—î –≥–∞—Ä–Ω—É –ª—ñ–Ω—ñ—é-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º."""
        self.console.print(Rule(title, style="bold magenta"))
    
    def display_celebration_animation(self) -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∞–Ω—ñ–º–∞—Ü—ñ—é —Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è."""
        celebration_symbols = ["üéâ", "üéä", "‚ú®", "üåü", "üí´", "üéÜ", "üéá"]
        
        for _ in range(2):  # –®–≤–∏–¥—à–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è
            symbols = " ".join(random.choices(celebration_symbols, k=10))
            self.console.print(Align.center(Text(symbols, style="bright_yellow")))
            time.sleep(0.2)  # –®–≤–∏–¥—à–∏–π —Ç–∞–π–º—ñ–Ω–≥
    
    def create_fancy_table_style(self, table: Table) -> Table:
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î –≥–∞—Ä–Ω–∏–π —Å—Ç–∏–ª—å –¥–æ —Ç–∞–±–ª–∏—Ü—ñ."""
        table.box = box.DOUBLE_EDGE
        table.border_style = "bright_blue"
        table.header_style = "bold bright_white on blue"
        table.row_styles = ["none", "dim"]
        return table
    
    def display_matrix_effect(self, duration: float = 3.0) -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –µ—Ñ–µ–∫—Ç '–ú–∞—Ç—Ä–∏—Ü—ñ' –∑ –ø–∞–¥–∞—é—á–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."""
        chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        width = self.console.size.width
        height = self.console.size.height
        
        with Live(auto_refresh=False) as live:
            for _ in range(int(duration * 10)):
                lines = []
                for _ in range(height - 5):
                    line = "".join(random.choices(chars, k=width))
                    lines.append(Text(line, style="bright_green"))
                
                live.update(Align.center("\n".join(str(line) for line in lines)))
                live.refresh()
                time.sleep(0.1)
    
    def create_neon_text(self, text: str, color: str = "bright_magenta") -> Text:
        """–°—Ç–≤–æ—Ä—é—î –Ω–µ–æ–Ω–æ–≤–∏–π –µ—Ñ–µ–∫—Ç –¥–ª—è —Ç–µ–∫—Å—Ç—É."""
        neon_text = Text()
        
        # –î–æ–¥–∞—î–º–æ '—Å–≤—ñ—Ç—ñ–Ω–Ω—è' —á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–æ—é —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—é
        shadow_colors = ["dim " + color, color, "bold " + color]
        
        for shadow_color in shadow_colors:
            for char in text:
                neon_text.append(char, style=shadow_color)
            neon_text.append("\n")
        
        return neon_text
    
    def display_startup_sequence(self, app_name: str = "CLI Assistant") -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–∞—Ä–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É –∑ –∞–Ω—ñ–º–∞—Ü—ñ—è–º–∏."""
        self.console.clear()
        
        # 1. –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤—ñ–¥–ª—ñ–∫
        self.animated.countdown_animation(3)
        
        # 2. –ê–Ω—ñ–º–æ–≤–∞–Ω–∏–π –ª–æ–≥–æ—Ç–∏–ø
        self.animated.animated_logo(3.0)
        
        # 3. –ï—Ñ–µ–∫—Ç –ú–∞—Ç—Ä–∏—Ü—ñ
        self.animated.matrix_rain(2.0)
        
        # 4. –ú–∞—à–∏–Ω–æ–ø–∏—Å–Ω–∏–π –µ—Ñ–µ–∫—Ç –¥–ª—è –Ω–∞–∑–≤–∏
        self.console.clear()
        self.animated.typewriter_effect(f"ü§ñ {app_name} ü§ñ", 0.08)
        time.sleep(1)
        
        # 5. –•–≤–∏–ª—å–æ–≤–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.animated.wave_animation("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ü–Ü-–ø–æ–º—ñ—á–Ω–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª—ñ–Ω–Ω—è!", 2.0)
        
        # 6. –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
        components = [
            "üß† –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è AI –º–æ–¥—É–ª—è",
            "üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö", 
            "üé® –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É",
            "üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏",
            "‚úÖ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
        ]
        
        with self.display_progress_bar(len(components), "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏") as progress:
            task = progress.add_task("startup", total=len(components))
            
            for component in components:
                progress.update(task, description=component)
                # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
                time.sleep(random.uniform(0.8, 1.5))
                progress.advance(task)
        
        # 7. –§–µ—î—Ä–≤–µ—Ä–∫ —É—Å–ø—ñ—Ö—É
        self.console.clear()
        self.animated.fireworks_effect(2.0)
        
        # 8. –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        self.display_success_message("–°–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
        
        # 9. –°—Ç—Ä–∏–±–∞—é—á–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        self.animated.bouncing_text("üåü –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –º–∞–π–±—É—Ç–Ω—î! üåü", 2.0)
    
    def display_menu_with_effects(self, title: str, options: List[str]) -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–∞—Ä–Ω–µ –º–µ–Ω—é –∑ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏."""
        self.create_gradient_rule(f"‚ú® {title} ‚ú®")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥–∞—Ä–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–ø—Ü—ñ–π
        columns = []
        for i, option in enumerate(options, 1):
            option_text = Text(f"{i}. {option}", style="bold bright_cyan")
            panel = Panel(
                option_text,
                box=box.ROUNDED,
                padding=(0, 1),
                style="blue"
            )
            columns.append(panel)
        
        self.console.print(Columns(columns, equal=True, expand=True))
        self.console.print()
