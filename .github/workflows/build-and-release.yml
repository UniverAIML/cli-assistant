name: Build and Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Permissions for creating tags and releases

jobs:
  create-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Permission to create tags
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for commit counting
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate tag
      id: create_tag
      run: |
        # Generate tag in format YYYY.WW.DD+BuildNumber
        YEAR=$(date +%Y)
        WEEK=$(date +%V)
        DAY=$(date +%d)
        
        # Count commits today as build number
        BUILD_NUMBER=$(git log --since="$(date +%Y-%m-%d) 00:00:00" --oneline | wc -l)
        
        # If no commits today, use run number
        if [ "$BUILD_NUMBER" -eq 0 ]; then
          BUILD_NUMBER=${{ github.run_number }}
        fi
        
        TAG="${YEAR}.${WEEK}.${DAY}+${BUILD_NUMBER}"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"

    - name: Create and push tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG=${{ steps.create_tag.outputs.tag }}
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag -a "$TAG" -m "Automated release $TAG"
        git push origin "$TAG"
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    needs: create-tag
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x64
            artifact_name: cli-assistant-windows-x64.exe
            build_script: build.bat
            python_version: '3.11'
          - os: ubuntu-latest
            arch: x64
            artifact_name: cli-assistant-linux-x64
            build_script: build.sh
            python_version: '3.11'
          - os: macos-13  # Intel macOS
            arch: x64
            artifact_name: cli-assistant-macos-x64
            build_script: build.sh
            python_version: '3.11'
          - os: macos-14  # Apple Silicon macOS
            arch: arm64
            artifact_name: cli-assistant-macos-arm64
            build_script: build.sh
            python_version: '3.11'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Copy macOS config (macOS only)
      if: runner.os == 'macOS'
      run: cp pyproject-mac.toml pyproject.toml

    - name: Update poetry lock file
      run: poetry lock
      shell: bash

    - name: Install dependencies
      run: poetry install
      shell: bash

    - name: Install PyInstaller and Pillow
      run: poetry run pip install pyinstaller pillow
      shell: bash

    - name: Verify icon files exist
      run: |
        echo "üîç Checking for icon files..."
        if [ "$RUNNER_OS" == "Windows" ]; then
          if [ -f "src/cli_assistant/icon.ico" ]; then
            echo "‚úÖ Windows icon found: src/cli_assistant/icon.ico"
          else
            echo "‚ùå Windows icon not found: src/cli_assistant/icon.ico"
            exit 1
          fi
        else
          if [ -f "src/cli_assistant/icon.png" ]; then
            echo "‚úÖ Unix icon found: src/cli_assistant/icon.png"
          else
            echo "‚ùå Unix icon not found: src/cli_assistant/icon.png"
            exit 1
          fi
        fi
      shell: bash

    - name: Build executable
      run: |
        mkdir -p "dist/executables"
        if [ "$RUNNER_OS" == "Windows" ]; then
          poetry run pyinstaller --onefile \
            --name "${{ matrix.artifact_name }}" \
            --distpath "dist/executables" \
            --workpath "build/temp" \
            --specpath "build/specs" \
            --icon "$(pwd)/src/cli_assistant/icon.ico" \
            --hidden-import=colorama \
            --hidden-import=openai \
            --hidden-import=questionary \
            --hidden-import=rich \
            --hidden-import=tabulate \
            --hidden-import=cli_assistant.chat_assistant \
            --hidden-import=cli_assistant.interactive_menu \
            --hidden-import=cli_assistant.config_manager \
            --hidden-import=cli_assistant.function_definitions \
            --hidden-import=cli_assistant.function_executor \
            --hidden-import=cli_assistant.model_manager \
            --hidden-import=cli_assistant.operations_manager \
            --hidden-import=cli_assistant.database.data_manager \
            --hidden-import=cli_assistant.database.contact_models \
            --hidden-import=cli_assistant.database.note_models \
            "src/cli_assistant/main.py"
        else
          if [ "$RUNNER_OS" == "macOS" ]; then
            ICON_FLAG="--icon $(pwd)/src/cli_assistant/icon.png"
            EXTRA_FLAGS="--osx-bundle-identifier com.univer.cli-assistant"
          else
            ICON_FLAG="--icon $(pwd)/src/cli_assistant/icon.png"
            EXTRA_FLAGS=""
          fi
          
          poetry run pyinstaller --onefile \
            --name "${{ matrix.artifact_name }}" \
            --distpath "dist/executables" \
            --workpath "build/temp" \
            --specpath "build/specs" \
            $ICON_FLAG \
            $EXTRA_FLAGS \
            --hidden-import=colorama \
            --hidden-import=openai \
            --hidden-import=questionary \
            --hidden-import=rich \
            --hidden-import=tabulate \
            --hidden-import=cli_assistant.chat_assistant \
            --hidden-import=cli_assistant.interactive_menu \
            --hidden-import=cli_assistant.config_manager \
            --hidden-import=cli_assistant.function_definitions \
            --hidden-import=cli_assistant.function_executor \
            --hidden-import=cli_assistant.model_manager \
            --hidden-import=cli_assistant.operations_manager \
            --hidden-import=cli_assistant.database.data_manager \
            --hidden-import=cli_assistant.database.contact_models \
            --hidden-import=cli_assistant.database.note_models \
            "src/cli_assistant/main.py"
        fi
      shell: bash

    - name: Verify build output
      run: |
        echo "üîç Checking for built executable..."
        ls -la "dist/executables/" || true
        
        if [ -f "dist/executables/${{ matrix.artifact_name }}" ]; then
          echo "‚úÖ Executable built successfully: ${{ matrix.artifact_name }}"
          echo "üìè File size: $(du -h "dist/executables/${{ matrix.artifact_name }}" | cut -f1)"
          echo "üéØ Platform: ${{ matrix.os }} (${{ matrix.arch }})"
        else
          echo "‚ùå Executable not found: ${{ matrix.artifact_name }}"
          echo "üìÅ Contents of dist/executables/:"
          ls -la "dist/executables/" || echo "Directory does not exist"
          exit 1
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/executables/${{ matrix.artifact_name }}

  build-python-packages:
    name: Build Python packages
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Build packages
      run: poetry build

    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        name: python-wheel
        path: dist/*.whl

    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: python-sdist
        path: dist/*.tar.gz

  release:
    name: Create Release
    needs: [create-tag, build, build-python-packages]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Permission to create releases
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Debug artifact structure
      run: |
        echo "üîç Checking artifact structure:"
        find release-artifacts -type f -name "*" || ls -la release-artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create-tag.outputs.tag }}
        name: "CLI Assistant ${{ needs.create-tag.outputs.tag }}"
        files: |
          release-artifacts/cli-assistant-windows-x64.exe/cli-assistant-windows-x64.exe
          release-artifacts/cli-assistant-linux-x64/cli-assistant-linux-x64
          release-artifacts/cli-assistant-macos-x64/cli-assistant-macos-x64
          release-artifacts/cli-assistant-macos-arm64/cli-assistant-macos-arm64
          release-artifacts/python-wheel/*.whl
          release-artifacts/python-sdist/*.tar.gz
        body: |
          ## CLI Assistant Release ${{ needs.create-tag.outputs.tag }}
          
          üöÄ **Automated release** created ${{ needs.create-tag.outputs.tag }}
          
          ### üéØ Available Downloads:
          
          #### Standalone Executables:
          - **Windows x64**: `cli-assistant-windows-x64.exe`
          - **Linux x64**: `cli-assistant-linux-x64`
          - **macOS Intel**: `cli-assistant-macos-x64`
          - **macOS Apple Silicon**: `cli-assistant-macos-arm64`
          
          #### Python Packages:
          - **Wheel**: `.whl` file for pip installation
          - **Source**: `.tar.gz` source distribution
          
          ### üöÄ Quick Start:
          
          #### Option 1: Download Executable
          Download the appropriate executable for your platform and run directly.
          
          #### Option 2: Install via pip
          ```bash
          pip install cli_assistant-*.whl
          ```
          
          ### üìã System Requirements:
          - No Python required for standalone executables
          - Python 3.9+ required for wheel installation
          
          ### üîß Build Information:
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Build Number**: ${{ github.run_number }}
          - **Trigger**: ${{ github.event_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
